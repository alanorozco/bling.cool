/**
 * Copyright 2019 Alan Orozco <alan@orozco.xyz>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
@import '../3p/style-range-inputs/style-range-inputs.scss';

// defaults, others in ./index.scss.vars.js
$lineHeight: 1.5;
$toolbarHeight: 48px;
$bodyBorder: 24px;
$smallView: 700px;

// text shadow
$shadowX: 6px;
$shadowY: 6px;
$shadowBlur: 12px;
$shadowOpacity: 0.48;

[type='range'] {
  margin: calc($thumb-height / 2) calc($thumb-height / 4);
}

$fuSafariOffset: 320px;

body {
  margin: 0;
  font-family: 'Chalkboard', 'Comic Sans MS', sans-serif;
  font-size: 16px;
  line-height: $lineHeight;
  overflow: hidden;
  min-height: 100vh;
  position: relative;

  @media (max-width: $smallView) {
    // min-height: 95vh; // lol
    &.safari {
      // position: fixed;
    }
    &.safari.focus {
      min-height: calc(100vh - $fuSafariOffset);
      max-height: calc(100vh - $fuSafariOffset);
      height: calc(100vh - $fuSafariOffset);
    }
  }
}

.hide-on-small {
  @media (max-width: $smallView) {
    display: none;
  }
}

.not-ready {
  opacity: 0;
  pointer-events: none;
}

.border {
  z-index: -1;
}

.border,
.fill {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.loader {
  background: white url(/assets/cat.gif) no-repeat center center;
  background-size: 604px 32px;
  opacity: 0;
  pointer-events: none;
  position: absolute;
  top: calc(4 * $marginUnit + $toolbarHeight);
  height: $toolbarHeight;
  left: $bodyBorder;
  right: $bodyBorder;
  z-index: 2;

  @media (max-width: $smallView) {
    top: auto;
    bottom: $marginUnit;
  }

  &.active {
    opacity: 1;
    pointer-events: all;
    display: block;
  }
}

footer {
  margin: $marginUnit 0;
  text-align: center;
  text-transform: lowercase;

  @media (max-width: $smallView) {
    display: none;
  }
}

.fl-r,
.fl-c,
.fl-cx,
main,
.editable-wrap,
button {
  display: flex;
  align-items: center;
  justify-content: center;
}

.fl-r,
button {
  flex-direction: row;
}

.fl-c,
.fl-cx,
main,
.editable-wrap {
  flex-direction: column;
}

.fl-cx {
  justify-content: start;
}

footer {
  font-size: 82%;

  > .buggy {
    color: $darkGrayish;
  }

  @media (max-width: $smallView) {
    font-size: 100%;
    padding: 0 $marginUnit;
  }
}

p {
  margin: calc($marginUnit / 2) 0;
}

main {
  background: white;
  box-sizing: border-box;
  position: absolute;
  top: $bodyBorder;
  right: $bodyBorder;
  bottom: $bodyBorder;
  left: $bodyBorder;
  height: calc(100vh - $bodyBorder);
  border-radius: calc(0.5 * $marginUnit);

  @media (max-width: $smallView) {
    border-radius: 0;
    right: 0;
    bottom: 0;
    left: 0;

    body.safari.focus & {
      height: calc(100vh - $bodyBorder + $fuSafariOffset);
      // bottom: $marginUnit + $fuSafariOffset;
    }
  }
}

.editable-wrap {
  flex: 1;
  cursor: text;
  box-sizing: border-box;
  width: 100%;
  overflow: hidden;
  padding: $marginUnit 0;

  @media (max-width: $smallView) {
    // fu sfari
    justify-content: start;
  }

  > div,
  > textarea {
    outline: none;
    text-align: center;
    background-clip: text;
    -webkit-background-clip: text;
    position: relative;

    max-width: calc(100vw - $marginUnit * 2);

    // It would be nice to use `color: transparent`, but chrome "optimizes"
    // it so it's clipped.
    color: white;
    -webkit-text-fill-color: transparent;

    // Some padding is needed so text is not clipped.
    padding: 0 $marginUnit * 2;

    // And for dynamic resizing:
    box-sizing: border-box;

    // TODO: Maybe this can be analyzed on build time based on font, as some
    // leave very large line gaps. Nice to have.
    line-height: 1.3;
  }

  > .editable-sentinel {
    position: absolute;
  }
}

.editable-text-fitter {
  color: transparent;
}

.textured,
.texture-option {
  background-color: $blue;
}

.textured {
  background-image: var(--texture-animated);
}

.textured-static {
  background-image: var(--texture-static);
}

$panelContentHeight: 60px;

.texture-option {
  width: calc($panelContentHeight);
  height: calc($panelContentHeight);
  margin: 0 calc($marginUnit / 4);
  display: block;
  cursor: pointer;
  transition: transform 0.3s, opacity 0.3s;
  opacity: 0.9;
  position: relative;

  &:hover,
  &.selected {
    transform: scale(1.1);
    opacity: 1;
  }

  &.selected {
    outline: 2px solid $blue;

    &:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: $transparentBlue;
    }
  }
}

$panelMarginForScrollbarUgh: 18px;
$panelGradientWidth: 60px;

$fontPreviewHeight: 32px;
$fontPreviewSize: 20px;

$fontOptionWidth: 160px;
$fontOptionHeight: $fontPreviewHeight + 20px;

$fontOptionMargin: 0.5 * $marginUnit;

$panelHeight: 2 * ($fontOptionHeight + 2 * $fontOptionMargin) + 2 * $marginUnit;

.panel {
  width: 100%;
  position: relative;
  padding: $marginUnit;
  margin: -$marginUnit 0 0;
  box-sizing: border-box;
  height: calc($panelHeight);

  &.sliding {
    overflow: hidden;
    height: calc($panelHeight);
    padding: 0;

    &:after,
    &:before {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      width: calc($panelGradientWidth);
      height: calc($panelHeight);
      pointer-events: none;
      z-index: 10000;
    }

    &:before {
      background: linear-gradient(to left, rgba(255, 255, 255, 0), white 80%);
    }

    &:after {
      background: linear-gradient(to right, rgba(255, 255, 255, 0), white 80%);
      right: 0;
    }

    > .panel-slider {
      overflow-y: hidden;
      overflow-x: scroll;
      -webkit-overflow-scrolling: touch;
      white-space: nowrap;
      height: calc(
        $panelHeight + $marginUnit * 2 + $panelMarginForScrollbarUgh
      );
      box-sizing: border-box;
      padding: $marginUnit calc($marginUnit / 2 + $panelGradientWidth)
        calc($marginUnit + $panelMarginForScrollbarUgh);
      position: relative;

      > div {
        display: inline-block;
      }
    }
  }
}

@keyframes slideDownFadeIn {
  to {
    transform: translate(0, 0);
    opacity: 1;
  }
}

#editable {
  caret-color: rgba($blue, 0.8);
  color: transparent;
  position: absolute;

  // ayy lmao ðŸ‘½
  // hack to make chrome show the editor caret when the area is empty.
  min-width: 10px;
  text-align: center;

  &:is(textarea) {
    -webkit-text-fill-color: auto;
    background-clip: border-box;
    background: transparent;
    border: none;
    resize: none;
  }
}

a {
  color: $blue;
  font-weight: bold;
  text-decoration: none;
  &:hover,
  &:active {
    color: $lightBlue;
  }
}

$buttonRadius: 64px;
$toolbarLineHeight: 32px;

.toolbar {
  margin: calc($marginUnit * 1.5) 0;
  color: $darkGrayish;
  height: calc($toolbarLineHeight + $marginUnit);
  line-height: $toolbarLineHeight;
  position: relative;

  @media (max-width: $smallView) {
    margin: $marginUnit 0;
  }

  input,
  select,
  button {
    font: inherit;
    color: inherit;
  }

  button,
  select {
    height: 100%;
    outline: none;
    background: transparent;
    border: 2px solid $lightGrayish;
    border-radius: $buttonRadius;
    text-align: center;
    text-align-last: center;
    line-height: $toolbarLineHeight;
    padding: 2px $marginUnit;
    margin: 0 calc($marginUnit / 4);

    > svg {
      height: 24px;
    }
    > svg,
    > svg > g,
    > svg > path {
      fill: $blue;
    }

    > label {
      margin-left: calc($marginUnit / 2);
    }

    @media (max-width: $smallView) {
      border-radius: 0;
      margin: 0 0 0 -2px; // negative same as border width
    }

    &:first-child {
      @media (max-width: $smallView) {
        margin-left: 0;
        border-top-left-radius: $buttonRadius;
        border-bottom-left-radius: $buttonRadius;
      }
    }

    &:last-child {
      @media (max-width: $smallView) {
        border-top-right-radius: $buttonRadius;
        border-bottom-right-radius: $buttonRadius;
      }
    }
  }
}

.selected-font {
  width: calc($fontOptionWidth - $marginUnit * 2);
  margin: 0 calc($marginUnit / 2);
  text-align: center;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.font-option {
  width: $fontOptionWidth;
  height: calc($fontOptionHeight + 2 * $fontOptionMargin);
  padding: calc($fontOptionMargin);
  box-sizing: border-box;
  margin-right: calc($fontOptionMargin);
  cursor: pointer;
  border-radius: 4px;

  &.selected {
    background: $lightBlue;
  }

  &.selected,
  &.selected .font-name {
    color: white;
  }

  &:nth-child(even) {
    position: absolute;
    margin: calc($fontOptionHeight + 3 * $fontOptionMargin)
      calc($fontOptionMargin) 0 calc(-$fontOptionWidth - $fontOptionMargin);
  }
}

.font-preview {
  height: $fontPreviewHeight;
  line-height: $fontPreviewHeight;
  font-size: $fontPreviewSize;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.font-name {
  color: $grayish;
  font-size: 80%;
}

.panel-toggle {
  position: relative;

  &.selected,
  &:active {
    color: white;
    z-index: 2;

    > svg,
    > svg > g,
    > svg > path {
      fill: white;
    }
  }

  &:active {
    background: $verylightBlue;
    border-color: $verylightBlue;
  }

  &.selected {
    background: $lightBlue;
    border-color: $lightBlue;
  }
}

.encoded {
  position: absolute;
  top: $bodyBorder + $marginUnit + $toolbarHeight - 2px;
  left: 0;
  right: 0;
  left: $bodyBorder;
  right: $bodyBorder;
  z-index: calc(10000 + 1);
  padding: $marginUnit 0;
  background: white;
  text-align: center;

  @media (max-width: $smallView) {
    left: 0;
    right: 0;
  }

  a {
    padding: calc($marginUnit / 2);

    > svg {
      height: 24px;
      margin: 0 calc($marginUnit / 2) 0 0;
    }

    &.close-button {
      color: $grayish;

      > svg > g {
        fill: $grayish;
      }

      &:hover {
        color: $blue;

        > svg > g {
          fill: $blue;
        }
      }
    }

    &.download-button {
      color: $blue; // hued

      > svg {
        fill: $blue; // hued
      }

      &:hover {
        color: $lightBlue; // hued

        > svg {
          fill: $lightBlue; // hued
        }
      }
    }
  }
}

.fun {
  position: absolute;
  color: $blue; // hued
  font-size: inherit;
  left: 0;
  right: 0;
  top: -2 * $marginUnit;
  pointer-events: none;

  :not([hidden]) & {
    animation: hidefun 0.8s;
    animation-fill-mode: both;
  }

  > svg {
    top: 0;
    width: 100px;
    fill: $verylightBlue; // hued
    position: absolute;

    &:first-child {
      transform: scale(-1, 1);
      right: 60%;
    }

    &:last-child {
      left: 60%;
    }
  }
}

@keyframes hidefun {
  100% {
    opacity: 0;
    transform: translate(0, -200px) scale(3);
  }
}

.close-button {
  font-weight: normal;
}

option {
  text-align: left;
}

[hidden] {
  display: none;
}

.label-range,
.label-toggle {
  margin: 0 calc($marginUnit / 2) $marginUnit;
  display: flex;
  align-items: flex-end;
  > span {
    display: block;
  }
}

.label-toggle {
  > span {
    margin: -2px calc($marginUnit / 2);
  }
}

.label-range {
  padding: 0 $marginUnit;
  > [type='range'] {
    width: auto;
    flex: 1;
  }
  > span {
    font-weight: bold;
    text-align: right;
    width: 64px; // hardcode for now
    margin: 2px calc($marginUnit / 2);
  }
}

.hued [type='range'] {
  // These have to be separated by pseudo-selector, they
  // won't work when properties are shared across selectors.
  &::-webkit-slider-thumb {
    background: $lightBlue;
  }
  &::-moz-range-thumb {
    background: $lightBlue;
  }
  &::-webkit-slider-runnable-track {
    background: $verylightBlue;
  }
  &::-moz-range-track {
    background: $verylightBlue;
  }
}
